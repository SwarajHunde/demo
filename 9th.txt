#include <GL/glut.h>
#include <cmath>


void init();
void display();
void dda(int x1,int y1,int x2 ,int y2);


int main(int argc, char **argv)
{  
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(500, 500);
    glutCreateWindow("DDA Line Drawing");
    init();   
    glutDisplayFunc(display);  
    glutMainLoop();
    return 0;
}


void init()
{
    glClearColor(0, 0, 0, 0); 
    gluOrtho2D(-250, 250, -250, 250); 
}


void display()
{
    glClear(GL_COLOR_BUFFER_BIT);

    
    glColor3f(1, 1, 1);
    glBegin(GL_LINES);
        glVertex2i(-250, 0); glVertex2i(250, 0); 
        glVertex2i(0, -250); glVertex2i(0, 250); 
    glEnd();

    
    dda(0,0,300,100);
    dda(0,0,-300,100);
    dda(0,0,-300,-100);
    dda(0,0,300,-100);

    glFlush();
}


void dda(int x1,int y1,int x2 ,int y2)
{
    int steps;
    int dx = x2 - x1;
    int dy = y2 - y1;

    
    if(abs(dx)>abs(dy))
    {
      steps=abs(dx);
    }
    else
    {
      steps=abs(dy);
    }
    
   
    float xin = dx / (float)steps;
    float yin = dy / (float)steps;

    float x = x1;
    float y = y1;

    glColor3f(0.0, 1.0, 0.0); 
    glBegin(GL_POINTS);
    for (int i = 0; i <= steps; i++)
    {
        glVertex2i(round(x), round(y));
        
        if(i%2==0)
        {
           x=x+xin;
        }
        else
        {
           y=y+yin;
        }
    }
    glEnd();
}