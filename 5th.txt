#include <GL/glut.h>
#include <iostream>
using namespace std;

void init() {
    glClearColor(1, 1, 1, 1); 
    gluOrtho2D(0, 500, 0, 500); 
}

void floodFill(int x, int y, float* newColor, float* oldColor)
 {
    float color[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, color);

    
    if ((color[0] == oldColor[0] && color[1] == oldColor[1] && color[2] == oldColor[2]) &&
        (color[0] != newColor[0] || color[1] != newColor[1] || color[2] != newColor[2])) 
        {
        
        glColor3f(newColor[0], newColor[1], newColor[2]);
        glBegin(GL_POINTS);
        glVertex2i(x, y);
        glEnd();
        glFlush();

        
        floodFill(x + 1, y, newColor, oldColor);
        floodFill(x - 1, y, newColor, oldColor);
        floodFill(x, y + 1, newColor, oldColor);
        floodFill(x, y - 1, newColor, oldColor);
    }
}

void draw()
 {
    glColor3f(0, 0, 0); 
    glBegin(GL_LINE_LOOP);
    glVertex2i(300, 200);
    glVertex2i(100, 250);
    glVertex2i(300, 150);
    glEnd();
    glFlush();
}

void handleKey(unsigned char key, int x, int y)
 {
    if (key == 'f') {
        float newColor[] = {0.0, 1.0, 0.0};  
        float oldColor[3];
        glReadPixels(250, 200, 1, 1, GL_RGB, GL_FLOAT, oldColor);  
        floodFill(250, 200, newColor, oldColor);
    }
}

void display() 
{
    glClear(GL_COLOR_BUFFER_BIT);
    draw();
}

void menu(int option) {
    float newColor[] = {0.0, 0.0, 1.0}; 
    float oldColor[3];
    glReadPixels(250, 200, 1, 1, GL_RGB, GL_FLOAT, oldColor);

    if (option == 1) 
    {
    floodFill(250, 200, newColor, oldColor);
    
    }
    else if (option == 2)
    {
    display();
    }  
}

void onMouse(int button, int state, int x, int y) 
{
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN)
     {
        float newColor[] = {1.0, 0.0, 0.0}; 
        float oldColor[3];

        
        y = 500 - y;

        glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, oldColor);
        floodFill(x, y, newColor, oldColor);
    }
}

int main(int argc, char** argv) 
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Flood Fill");
    init();
    glutDisplayFunc(display);
    glutMouseFunc(onMouse);
    glutKeyboardFunc(handleKey);

    glutCreateMenu(menu);
    glutAddMenuEntry("Flood Fill", 1);
    glutAddMenuEntry("Reset", 2);
    glutAttachMenu(GLUT_RIGHT_BUTTON);
    glutMainLoop();
    return 0;
}