#include <GL/glut.h>
#include <iostream>
using namespace std;

void drawShape();

void init() {
    glClearColor(1, 1, 1, 1); 
    gluOrtho2D(0, 500, 0, 500);
}

void boundaryFill(int x, int y, float* fillColor, float* boundaryColor) {
    float pixel[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, pixel);

    if ((pixel[0] != boundaryColor[0] || pixel[1] != boundaryColor[1] || pixel[2] != boundaryColor[2]) &&
        (pixel[0] != fillColor[0] || pixel[1] != fillColor[1] || pixel[2] != fillColor[2])) {

        glColor3fv(fillColor);
        glBegin(GL_POINTS);
        glVertex2i(x, y);
        glEnd();
        glFlush();

        boundaryFill(x + 1, y, fillColor, boundaryColor);
        boundaryFill(x - 1, y, fillColor, boundaryColor);
        boundaryFill(x, y + 1, fillColor, boundaryColor);
        boundaryFill(x, y - 1, fillColor, boundaryColor);
    }
}

void drawShape() {
    glColor3f(0.0, 0.0, 0.0); 
    glBegin(GL_LINE_LOOP);
    glVertex2i(200, 200);
    glVertex2i(300, 300);
    glVertex2i(150, 350);
    glEnd();
    glFlush();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    drawShape();
    glFlush();
}

void handleKey(unsigned char key, int x, int y) {
    if (key == 'b' || key == 'B') {
        float fillColor[] = {0.0, 1.0, 0.0}; 
        float boundaryColor[] = {0.0, 0.0, 0.0}; 

        drawShape(); 
        boundaryFill(200, 250, fillColor, boundaryColor);
    }
}

void onMouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
        float fillColor[] = {1.0, 0.0, 0.0}; 
        float boundaryColor[] = {0.0, 0.0, 0.0}; 

        y = 500 - y;
        boundaryFill(x, y, fillColor, boundaryColor);
    }
}

void menu(int option) {
    float fillColor[] = {0.0, 0.0, 1.0}; 
    float boundaryColor[] = {0.0, 0.0, 0.0}; 

    if (option == 1) {
        drawShape();
        boundaryFill(200, 250, fillColor, boundaryColor);
    } else if (option == 2) {
        glutPostRedisplay(); 
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Boundary Fill");
    init();

    glutDisplayFunc(display);
    glutMouseFunc(onMouse);
    glutKeyboardFunc(handleKey);

    glutCreateMenu(menu);
    glutAddMenuEntry("Fill (Menu)", 1);
    glutAddMenuEntry("Reset", 2);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutMainLoop();
    return 0;
}