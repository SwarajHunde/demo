#include <GL/glut.h>
#include <iostream>
using namespace std;


void init() {
    glClearColor(1, 1, 1, 1); 
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(-1, 1, -1, 1);
}

float cPoints[4][2]={{-0.8,-0.4},{-0.4,0.6},{0.4,0.6},{0.8,0.4}};

void interpolate(float *p,float *q,float t,float *result)
{

   result[0]=(1-t)*p[0]+t*q[0];
   result[1]=(1-t)*p[1]+t*q[1];

}


void bezier(float p0[2],float p1[2],float p2[2], float p3[2],int level)
{
   if(level==0)
   {
      
      glBegin(GL_LINE_STRIP);
      
      for(float t=0;t<=1.0;t=t+0.01f)
      {
         float a[2],b[2],c[2],d[2],e[2],p[2];
         
         interpolate(p0,p1,t,a);
         interpolate(p1,p2,t,b);
         interpolate(p2,p3,t,c);
         interpolate(a,b,t,d);
         interpolate(b,c,t,e);
         interpolate(d,e,t,p);
         glVertex2f(p[0],p[1]);
         
      }
      
      glEnd(); 
      
      return; 
      
      
   }
   
   float p01[2],p12[2],p23[2];
   float p012[2],p123[2]; 
   float p0123[2];
   
   
   interpolate(p0,p1,0.5,p01);
   interpolate(p1,p2,0.5,p12);
   interpolate(p2,p3,0.5,p23);
   interpolate(p01,p12,0.5,p012);
   interpolate(p12,p23,0.5,p123);
   interpolate(p012,p123,0.5,p0123);
      
      
   bezier(p0,p01,p012,p0123,level-1);
   bezier(p0123,p123,p23,p3,level-1);
}


void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(0, 0, 1); 
    
    bezier(cPoints[0],cPoints[1],cPoints[2],cPoints[3],4);
   
    glFlush();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Bezier curve");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}